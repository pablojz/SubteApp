// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SubteApp;
//
//    var serviceAlerts = ServiceAlerts.FromJson(jsonString);

namespace SubteApp
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ServiceAlerts
    {
        [JsonProperty("header")]
        public Header Header { get; set; }

        [JsonProperty("entity")]
        public List<Entity> Entity { get; set; }
    }

    public partial class Entity
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("is_deleted")]
        public bool IsDeleted { get; set; }

        [JsonProperty("trip_update")]
        public object TripUpdate { get; set; }

        [JsonProperty("vehicle")]
        public object Vehicle { get; set; }

        [JsonProperty("alert")]
        public Alert Alert { get; set; }
    }

    public partial class Alert
    {
        [JsonProperty("active_period")]
        public List<object> ActivePeriod { get; set; }

        [JsonProperty("informed_entity")]
        public List<InformedEntity> InformedEntity { get; set; }

        [JsonProperty("cause")]
        public long Cause { get; set; }

        [JsonProperty("effect")]
        public long Effect { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("header_text")]
        public Text HeaderText { get; set; }

        [JsonProperty("description_text")]
        public Text DescriptionText { get; set; }
    }

    public partial class Text
    {
        [JsonProperty("translation")]
        public List<Translation> Translation { get; set; }
    }

    public partial class Translation
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("language")]
        public Language Language { get; set; }
    }

    public partial class InformedEntity
    {
        [JsonProperty("agency_id")]
        public string AgencyId { get; set; }

        [JsonProperty("route_id")]
        public string RouteId { get; set; }

        [JsonProperty("route_type")]
        public long RouteType { get; set; }

        [JsonProperty("trip")]
        public object Trip { get; set; }

        [JsonProperty("stop_id")]
        public string StopId { get; set; }
    }

    public partial class Header
    {
        [JsonProperty("gtfs_realtime_version")]
        public string GtfsRealtimeVersion { get; set; }

        [JsonProperty("incrementality")]
        public long Incrementality { get; set; }

        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
    }

    public enum Language { Es };

    public partial class ServiceAlerts
    {
        public static ServiceAlerts FromJson(string json) => JsonConvert.DeserializeObject<ServiceAlerts>(json, SubteApp.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ServiceAlerts self) => JsonConvert.SerializeObject(self, SubteApp.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LanguageConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Language) || t == typeof(Language?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "es")
            {
                return Language.Es;
            }
            throw new Exception("Cannot unmarshal type Language");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Language)untypedValue;
            if (value == Language.Es)
            {
                serializer.Serialize(writer, "es");
                return;
            }
            throw new Exception("Cannot marshal type Language");
        }

        public static readonly LanguageConverter Singleton = new LanguageConverter();
    }
}
