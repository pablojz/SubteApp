// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SubteApp;
//
//    var ForecastGTFS = ForecastGTFS.FromJson(jsonString);

namespace SubteApp
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ForecastGTFS
    {
        [JsonProperty("Header")]
        public HeaderF Header { get; set; }

        [JsonProperty("Entity")]
        public List<EntityF> EntityF { get; set; }
    }

    public partial class EntityF
    {
        [JsonProperty("ID")]
        public string Id { get; set; }

        [JsonProperty("Linea")]
        public Linea Linea { get; set; }
    }

    public partial class Linea
    {
        [JsonProperty("Trip_Id")]
        public string TripId { get; set; }

        [JsonProperty("Route_Id")]
        public string RouteId { get; set; }

        [JsonProperty("Direction_ID")]
        public long DirectionId { get; set; }

        [JsonProperty("start_time")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("start_date")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StartDate { get; set; }

        [JsonProperty("Estaciones")]
        public List<Estacione> Estaciones { get; set; }
    }

    public partial class Estacione
    {
        [JsonProperty("stop_id")]
        public string StopId { get; set; }

        [JsonProperty("stop_name")]
        public string StopName { get; set; }

        [JsonProperty("arrival")]
        public Arrival Arrival { get; set; }

        [JsonProperty("departure")]
        public Arrival Departure { get; set; }
    }

    public partial class Arrival
    {
        [JsonProperty("time")]
        public long Time { get; set; }

        [JsonProperty("delay")]
        public long Delay { get; set; }
    }

    public partial class HeaderF
    {
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
    }

    public partial class ForecastGTFS
    {
        public static ForecastGTFS FromJson(string json) => JsonConvert.DeserializeObject<ForecastGTFS>(json, SubteApp.ConverterF.Settings);
    }

    public static class SerializeF
    {
        public static string ToJson(this ForecastGTFS self) => JsonConvert.SerializeObject(self, SubteApp.ConverterF.Settings);
    }

    internal static class ConverterF
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
